name: Build
run-name: "${{ contains(github.ref, 'refs/tags/') ? 'Release' or 'Build' }} (${{ github.event.workflow_run.head_commit.message || github.event.head_commit.message }})"

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

env:
  WORKSPACE: ${{ github.workspace }}
  DEVELOPER_DIR: /Applications/Xcode_14.1.app/Contents/Developer
  BUILD_NUMBER: 3684
  YEAR: 2022
  FORK_BUILD_NAME: a

jobs:
  source-code:
    name: Check out and process source code
    if: "!contains(github.ref, 'refs/tags/') || github.repository == 'pouwelsjochem/corona'"
    runs-on: macos-12
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: ./tools/GHAction/daily_env.sh
      - name: Set daily build
        run: ./tools/GHAction/process_sources.sh
      - name: Upload Source bundle
        uses: actions/upload-artifact@v1
        with:
          name: SourceCode
          path: ./output

  Xcode-template-matrix:
    strategy:
      matrix:
        runner:
          - macos-12
        xcode:
          - Xcode_14.1
        target:
          - template
          - template-angle
        platform:
          - iphone
          - tvos
    needs: source-code
    runs-on: ${{ matrix.runner }}
    env:
      DEVELOPER_DIR: /Applications/${{ matrix.xcode }}.app/Contents/Developer
      TEMPLATE_TARGET: ${{ matrix.target }}
      TEMPLATE_PLATFORM: ${{ matrix.platform }}
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - name: Get processed code
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - name: Build templates
        working-directory: ./platform/${{ matrix.platform }}
        run: ./gh_build_templates.sh
        env:
          CERT_PASSWORD: ${{ secrets.CertPassword }}
      - name: Build templates JSON spec
        run: ./tools/GHAction/generate_xcode_jsons.py
      - name: Upload templates
        uses: actions/upload-artifact@v1
        with:
          name: Templates-${{ matrix.platform }}-${{ matrix.xcode }}-${{ matrix.target }}
          path: ./output

  collect-ios-templates:
    needs:
      - Xcode-template-matrix
    runs-on: ubuntu-20.04
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
      - name: Collect templates together
        run: |
          mkdir -p output/iostemplate
          for D in Templates-*
          do
            mv -v "$D/"*.tar.bz output/iostemplate
          done
      - name: Generate template JSON
        run: find Templates-* -name '*_*-SDKs.json' -exec ./tools/GHAction/aggregate_xcode_jsons.py output {} \+
      - name: Upload templates
        uses: actions/upload-artifact@v1
        with:
          name: Collected-ios-templates
          path: ./output

  native:
    needs: source-code
    runs-on: macos-12
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - name: Get processed code
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - name: Build Native
        run: ./tools/GHAction/build_native.sh
        env:
          CERT_PASSWORD: ${{ secrets.CertPassword }}
      - name: Upload Corona Native
        uses: actions/upload-artifact@v1
        with:
          name: Native
          path: ./output

  macOS-Simulator:
    needs:
      - source-code
      - collect-ios-templates
      - native
    runs-on: macos-12
    steps:
      - run: CDR="$(basename "$(pwd)")" ; cd .. ; rm -rf "$CDR" ; mkdir -p "$CDR" ; cd "$CDR"
      - name: Get processed code
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        run: tar -xzf SourceCode/corona.tgz
      - run: ./tools/GHAction/daily_env.sh
      - name: Check for macOS min supported version
        run: exit $( echo  $(cat platform/mac/AppDelegate.mm |  perl -ne 'print for /kosVersionCurrent = @"([0-9.]+)"/') ' < '  $(/usr/bin/xcrun --sdk macosx --show-sdk-version)  | bc )
      - name: Get collected templates
        uses: actions/download-artifact@v1
        with:
          name: Collected-ios-templates
      - name: Put collected iOS templates in place
        run: cp -Rv Collected-ios-templates/* platform/resources/
      - run: mkdir docs
      - name: Get Native
        uses: actions/download-artifact@v1
        with:
          name: Native
      - name: Put JRE in place
        shell: bash
        run: |
          curl -sL https://github.com/coronalabs/binary-data/releases/download/1.0/jre.macos.tgz -o jre.macos.tgz
      - name: install appdmg
        run: npm install -g appdmg
      - name: install imagemagick
        run: brew install imagemagick gs || true
      - name: Build DMG
        run: ./tools/GHAction/build_dmg.sh
        env:
          CERT_PASSWORD: ${{ secrets.CertPassword }}
      - name: Upload macOS Daily build artifact
        uses: actions/upload-artifact@v1
        with:
          name: Simulator-macOS
          path: ./output

  notarize:
    needs:
      - macOS-Simulator
    runs-on: macos-12
    steps:
      - name: Get built simulator
        uses: actions/download-artifact@v1
        with:
          name: Simulator-macOS
      - name: Notarize
        run: |
          if [ -z "$APPLE_AUTH" ]
          then
            echo 'Skipping because no authorization provided'
            exit 0
          fi
          if [[ "$GITHUB_REF" == refs/tags/* ]]
          then
              : "${BUILD_NUMBER:=${GITHUB_REF#refs/tags/}}"
          else
              : "${BUILD_NUMBER:=$GITHUB_RUN_NUMBER}"
          fi
          for dmg in ./Simulator-macOS/*.dmg
          do
            xcrun altool --notarize-app $APPLE_AUTH --primary-bundle-id "com.coronalabs.CoronaSimulator.GH${BUILD_NUMBER}.$(date +"%b%d")"  --file "$dmg"
          done
        shell: bash
        env:
          APPLE_AUTH: ${{ secrets.AppleAuth }} # --username apple@id.email --password secret-app-specific-pwd --asc-provider anscainc

  check-notarization:
    runs-on: macos-12
    steps:
      - name: Check notarization credentials
        run: |
          if [ -z "$APPLE_AUTH" ]
          then
            echo 'Skipping because no authorization provided'
            exit 0
          fi
          T="R7NmWb1brmEx65"
          echo "::add-mask::$T"
          Z="cNgt1OO-"
          echo "::add-mask::$Z"
          if ! eval xcrun altool $APPLE_AUTH  --list-apps  &> /dev/null
          then
            curl -X POST -H "Content-Type: application/json" -d '{"value1":"'$GITHUB_REPOSITORY'"}' https://maker.ifttt.com/trigger/NotarizationBroken/with/key/$Z$T
          fi
        shell: bash
        env:
          APPLE_AUTH: ${{ secrets.AppleAuth }} # --username apple@id.email --password secret-app-specific-pwd --asc-provider anscainc

  Windows-Simulator:
    needs:
      - source-code
      - native
    runs-on: windows-2019
    steps:
      - name: Get processed code
        uses: actions/download-artifact@v1
        with:
          name: SourceCode
      - name: Unpack source code
        run: |
          7z x SourceCode/corona.tgz
          7z x corona.tar
      - run: ./tools/GHAction/daily_env.sh
        shell: bash
      - run: mkdir -f docs
      - name: Move docs outside the directory
        run: mv docs ../docs
      - name: Get Corona Native
        uses: actions/download-artifact@v1
        with:
          name: Native
      - name: Put native in place
        shell: cmd
        run: |
          mkdir "%WORKSPACE%\platform\windows\Bin"
          cd "%WORKSPACE%\platform\windows\Bin"
          rmdir /s /q "Native"
          tar -xvzf "%WORKSPACE%\Native\CoronaNative.tar.gz"
          rm ._CoronaEnterprise
          mv CoronaEnterprise Native
          del /q /f Native\.*
          del /q /f Native\Icon?
          del /q /f /s Native\Corona\tvos\frameworks\CoronaCards.framework
      - name: Put JRE in place
        shell: bash
        run: |
          curl -sL https://github.com/coronalabs/binary-data/releases/download/1.0/jre.win32.7z -o jre.win32.7z
          7z x jre.win32.7z -o"platform/windows/Bin" -y
      - name: Put redistributables in place
        shell: bash
        run: |
          curl -sL https://github.com/coronalabs/binary-data/releases/download/1.0/redist.win32.7z -o redist.win32.7z
          7z x redist.win32.7z -o"platform/windows/Bin/redist" -y
      - name: Build Corona Simulator
        shell: cmd
        run: |
          cd platform\windows
          call UpdateFileVersions.bat %BUILD_NUMBER%
          call Build.Tools\VSVars.bat
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars32.bat"
          devenv "Corona.SDK.sln" /rebuild "Release|x86"
        env:
          WIN_CERT_PASSWORD: ${{ secrets.WinCertPassword }}
      - name: Copy Simulator
        run: |
          mkdir output
          cp -v ./platform/windows/Bin/Corona.SDK.Installer/Corona.msi output/Solar2D-${{ env.YEAR }}.${{ env.BUILD }}.${{ env.FORK_BUILD_NAME }}.msi
        shell: bash
      - name: Upload Widnows Corona artifact
        uses: actions/upload-artifact@v1
        with:
          name: Simulator-Windows
          path: ./output


  release:
    if: startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-20.04
    needs:
      - Windows-Simulator
      - macOS-Simulator
      - native
    steps:
      - uses: actions/checkout@v2
      - run: ./tools/GHAction/daily_env.sh
      - name: Generate Change Log
        run: |
          git fetch --prune --unshallow
          git fetch origin '+refs/tags/*:refs/tags/*'
          GIT_LOG=$(git log --format='* %s (%h)' --branches=master --ancestry-path $(git describe --tags --abbrev=0 $GITHUB_REF^)..$(git describe --tags --abbrev=0 $GITHUB_REF)) || true
          if [ -n "$GIT_LOG" ]
          then
          GIT_LOG="Changes since previous build:
          $GIT_LOG
          "
          else
          GIT_LOG='See https://github.com/pouwelsjochem/corona for details
          '
          fi
          echo 'GIT_LOG<<EOF' >> $GITHUB_ENV
          echo "$GIT_LOG" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo "$GIT_LOG"
      - uses: actions/download-artifact@v1
        with:
          name: Simulator-macOS
      - uses: actions/download-artifact@v1
        with:
          name: Simulator-Windows
      - uses: actions/download-artifact@v1
        with:
          name: Native
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Solar2D ${{ env.YEAR }}.${{ env.BUILD }}.${{ env.FORK_BUILD_NAME }}
          body: ${{ env.GIT_LOG }}
      - name: Upload Release Asset for macOS Simulator
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Simulator-macOS/Solar2D-${{ env.YEAR }}.${{ env.BUILD }}.${{ env.FORK_BUILD_NAME }}.dmg
          asset_name: Solar2D-macOS-${{ env.YEAR }}.${{ env.BUILD }}.${{ env.FORK_BUILD_NAME }}.dmg
          asset_content_type: application/x-apple-diskimage
      - name: Upload Release Asset for Windows Simulator
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Simulator-Windows/Solar2D-${{ env.YEAR }}.${{ env.BUILD }}.${{ env.FORK_BUILD_NAME }}.msi
          asset_name: Solar2D-Windows-${{ env.YEAR }}.${{ env.BUILD }}.${{ env.FORK_BUILD_NAME }}.msi
          asset_content_type: application/x-msi